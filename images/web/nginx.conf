# Nginx config file.

# Optimizing Nginx:
#  http://engineering.chartbeat.com/2014/01/02/part-1-lessons-learned-tuning-tcp-and-nginx-in-ec2/

# useful modules?
# - https://github.com/vozlt/nginx-module-vts


user nginx;

# 'auto' attempts to auto detect the number of CPU cores.
# For now, use 1 though, because if there's just one worker, and it crashes,
# Nginx auto restarts it. [NGXSEGFBUG]
#
# Background: Nchan + Nginx crached sometimes:
# https://github.com/slact/nchan/issues/477#issuecomment-45284823,
# but now Nchan is gone, so:
#   DO_AFTER 2020-07-01: change to 'auto'
#
worker_processes 1;  # later: 'auto'

# Core dump path, and max core dump size. They can be about 200M large (so 400M usually large enough?).
#working_directory /tmp/cores/;  # needs to mount/create dir, otherwise Nginx won't start [NGXCORED]
#worker_rlimit_core 400M;

# Run nginx in the foreground.
# (We run nginx via Docker, and by default the nginx command exits directly (because it
# starts nginx as a background daemon) which makes the docker container exits, and then
# the background daemon stops too.)
daemon off;

events {
  # In the Docker image, `ulimit -n` –> 524288, and say 10 cores? -> max 52400, say 30 000 then
  # Currently just 1 worker process though (see above) so let's pick 50 000 for now.
  # Max total connections = worker_processes * worker_connections.
  worker_connections 50000;
}


http {
  include  /etc/nginx/mime.types;
  default_type application/octet-stream;

  # Specify charset, so utf-8 symbols in js and css files look ok. And add 'text/css'
  # to the content types for which the charset is specified (not incl by default).
  charset utf-8;
  # text/html is included by default — listing it below, too, would cause a
  #   "duplicate MIME type "text/html" in /etc/nginx/nginx.conf"
  # warning.
  charset_types text/xml text/plain text/vnd.wap.wml application/javascript application/rss+xml text/css ;
  source_charset utf-8;

  server_tokens off;

  # Prevent clickjacking. Now moved to Scala instead [7ACKRQ20]
  # allow_embedding_from, and use 'Content-Security-Policy: frame-ancestors ...' instead, for Chrome.
  #add_header X-Frame-Options DENY;

  sendfile on;
  sendfile_max_chunk 2m;
  tcp_nopush on; # if off, then like 14 100 req/sec instead of like 15 300, for 1kb image.

  # We don't require so very lower latency on every packet sent.
  # And John Nagle says it's not needed? https://news.ycombinator.com/item?id=9045125
  tcp_nodelay off;

  # This makes things slower: 14 600 req/sec instead of like 15 300, for 1kb image.
  # aio threads;

  keepalive_timeout  65;

  include  /etc/nginx/http-limits.conf;


  # ----- Lua

  # By default, Lua loads a resty.core package that Talkyard doesn't need,
  # would cause this error message:
  #  "[error] lua_load_resty_core failed to load the resty.core module"
  # Seems it'd be a good idea to start using it?:
  #  https://github.com/openresty/lua-resty-core
  # Discussion: https://gitlab.alpinelinux.org/alpine/aports/issues/10478
  # There's still this message:
  #  "detected a LuaJIT version which is not OpenResty's; many optimizations will be disabled"
  # which is apparently harmless.
  lua_load_resty_core off;

  #lua_code_cache off;
  #lua_package_path '/opt/lua-packages/lua-resty-lrucache/lib/?.lua;/opt/lua-packages/lua-resty-redis/lib/?.lua;;';
  lua_package_path '/opt/talkyard/lua/lua-limit-bandwidth/?.lua;;';
  include /opt/talkyard/lua/lua-limit-bandwidth/lua-limit-bandwidth.conf;


  # ----- HTTPS session cache

  # (HTTPS hardening is instead done in ssl-hardening.conf, because should be placed
  # directly after the cert and key directives.)

  # Avoid CPU intensive SSL handshake. 1MB cache contains about 4000 sessions.
  # The default timeout is 5 minutes
  # (See http://nginx.org/en/docs/http/configuring_https_servers.html)
  ssl_session_cache shared:SSL:15m;  # > 15m for large servers?  [memory]
  ssl_session_timeout 10m;


  # ----- Logging

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;

  error_log /var/log/nginx/error.log debug;
  error_page 502 /502.html;
  error_page 503 /503.html;


  # ----- Reverse proxy cache

  proxy_cache_path /opt/nginx/proxy-cache levels=1:2 keys_zone=EfDiCache:8m max_size=1000m inactive=600m;
  proxy_temp_path /opt/nginx/proxy-temp;


  # ----- Virtual hosts

  include /etc/nginx/sites-enabled-manual/*.conf;
  # CLEAN_UP remove default-site after I've moved everything to conf/web/sites-enabled-manual/.
  include /etc/nginx/default-site/*.conf;
  include /etc/nginx/sites-enabled-auto-gen/*.conf;
  # CLEAN_UP remove sites-enabled after I've moved everything to data/web/sites-enabled-auto-gen/.
  # No, keep? Now when HTTPS will be via lua-resty-auto-ssl, won't need any auto gen sites?
  include /etc/nginx/sites-enabled/*.conf;

}

# vim: et ts=2 sw=2 tw=0 list
